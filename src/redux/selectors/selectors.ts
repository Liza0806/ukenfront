import { RootState } from "../store/store";
import { EventTypeDB, GroupType, Payment, User } from "../types/types";
import { createSelector } from "reselect";

export const selectGroups = (state: RootState): GroupType[] => state.groups.groups;
export const selectCurrentGroup = (state: RootState): GroupType | undefined => state.groups.currentGroup;
export const selectGroupsIsLoading = (state: RootState): boolean => state.groups.isLoading;
export const selectGroupsError = (state: RootState): string | undefined => state.groups.error;

export const selectUsersIsLoading = (state: RootState): boolean => state.users.isLoading;
export const selectUsers = (state: RootState): User[] => state.users.users;

export const selectEvents = (state: RootState): EventTypeDB[] => state.events.events;
export const selectEventsIsLoading = (state: RootState): boolean => state.events.isLoading;
export const selectCurrentEvent = (state: RootState): EventTypeDB | undefined => state.events.currentEvent;

export const selectPayments = (state: RootState): Payment[] => state.payments.payments;
// –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π –≤ —ç—Ç–æ–º –≥–æ–¥—É
export const selectEventsThisYear = createSelector(
  [selectEvents],
  (events: EventTypeDB[]) => {
    const now = new Date();
    const startOfYear = new Date(now.getFullYear(), 0, 1); // –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    const endOfYear = new Date(now.getFullYear(), 11, 31, 23, 59, 59, 999); // –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞

    return events.filter((event) => {
      const eventDate = new Date(event.date);
      return eventDate >= startOfYear && eventDate <= endOfYear;
    });
  }
);

// –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
export const selectEventsThisMonth = createSelector(
  [selectEvents],
  (events: EventTypeDB[]) => {
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1); // –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞

    return events.filter((event) => {
      const eventDate = new Date(event.date);
      return eventDate >= startOfMonth && eventDate <= endOfMonth;
    });
  }
);

  export const selectEventsThisWeek = createSelector(
    [selectEvents],
    (events: EventTypeDB[]) => {
      const now = new Date();
      const startOfWeek = new Date(now);
      startOfWeek.setDate(now.getDate() - now.getDay());
  
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
  
      return events.filter((event) => {
        const eventDate = new Date(event.date);
        return eventDate >= startOfWeek && eventDate <= endOfWeek;
      });
    }
  );

  export const selectSortedUsers = createSelector(
    [selectUsers],
    (users: User[]) => {
      return users.slice().sort((a, b) => a.name.localeCompare(b.name)); 
    }
  );
  export const selectActiveUsers = createSelector(
    [selectUsers],
    (users: User[]) => {
      return  users?.filter(user => user.isActive === true) || []
    }
  );
  

//"proxy": "https://ukenback.vercel.app",
// "proxy": "http://localhost:3001",
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reselect –¥–ª—è –≤—Å–µ—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ ‚Äì –∏–∑–±—ã—Ç–æ—á–Ω–æ. –ù–æ –≤–æ—Ç –∫–æ–≥–¥–∞ –µ–≥–æ —Å—Ç–æ–∏—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å:
// üîπ –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–µ–ª–∞–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –∞–≥—Ä–µ–≥–∞—Ü–∏—è, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞).
// üîπ –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤/–æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–º–∞–µ—Ç memo.
// üîπ –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö, –∏ –º—ã —Ö–æ—Ç–∏–º –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.