{"version":3,"file":"static/js/659.ecbfcdd4.chunk.js","mappings":"qJAGO,MACMA,EAAkDC,EAAAA,G,qBCK/D,MA+EA,EA/EkBC,KAChB,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,WAAS,GAE7CC,GDT4BC,EAAAA,EAAAA,OCUlCC,EAAAA,EAAAA,YAAU,KACRF,GAASG,EAAAA,EAAAA,KAAiB,GACzB,IAEH,MAAMC,EAAsBV,GAAgBW,GAAUA,EAAMD,OAAOA,SA+CnE,OACEE,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,cAEHC,EAAAA,EAAAA,KAAA,KAAGC,QAhDiBC,KACxBZ,GAAkBD,EAAc,EA+CAU,SAAC,WAE5BV,IACCW,EAAAA,EAAAA,KAAA,MAAAD,SACGH,EAAOO,KAAKC,IACJJ,EAAAA,EAAAA,KAAA,KAAAD,SAAoBK,EAAMC,OAAlBD,EAAME,UAIjCN,EAAAA,EAAAA,KAAA,KAAGC,QAjBsBM,OAiBER,SAAC,cACtBC,EAAAA,EAAAA,KAAA,WAOI,C","sources":["redux/hooks/hooks.ts","pages/AdminPage/AdminPage.tsx"],"sourcesContent":["import { useDispatch, useSelector, TypedUseSelectorHook } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"../store/store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import React, { MouseEventHandler, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks/hooks\";\r\nimport { fetchAllGroups } from \"../../redux/thunks/thunks\";\r\nimport { GroupType, EventType } from \"../../redux/slices/groupsSlice\";\r\nimport { isSameDay, isSameWeek, isSameMonth, subMonths, getMonth, getYear } from 'date-fns';\r\n\r\n\r\nconst AdminPage = () => {\r\n  const [visibleGroups, setVisibleGroups] = useState(false);\r\n\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    dispatch(fetchAllGroups());\r\n  }, []);\r\n\r\n  const groups: GroupType[] = useAppSelector((state) => state.groups.groups);\r\n\r\n  const toggleGroupList = () => {\r\n  setVisibleGroups(!visibleGroups)\r\n  }\r\n \r\n  \r\nconst onChousePeriod = (id: string)=> {\r\n  const now = new Date();\r\n// const events = groups.map(g=> {\r\n\r\n// })\r\n//   switch (id) {\r\n//     case 'today':\r\n//       return events.filter(event => {\r\n//         const eventDate = new Date(event.date);\r\n//         return isSameDay(eventDate, now);\r\n//       });\r\n\r\n//     case 'week':\r\n//       return events.filter(event => {\r\n//         const eventDate = new Date(event.date);\r\n//         return isSameWeek(eventDate, now, { weekStartsOn: 1 });\r\n//       });\r\n\r\n//     case 'month':\r\n//       return events.filter(event => {\r\n//         const eventDate = new Date(event.date);\r\n//         return isSameMonth(eventDate, now);\r\n//       });\r\n\r\n//     case 'lastMonth':\r\n//       return events.filter(event => {\r\n//         const eventDate = new Date(event.date);\r\n//         const lastMonth = subMonths(now, 1);\r\n//         return getMonth(eventDate) === getMonth(lastMonth) && getYear(eventDate) === getYear(lastMonth);\r\n//       });\r\n\r\n//     default:\r\n//       return []; \r\n//   }\r\n};\r\n  const toggleSchedule = () => {\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      Admin Page\r\n      <p onClick={toggleGroupList}>Groups</p>\r\n\r\n      {visibleGroups && (\r\n        <ul>\r\n          {groups.map((group) => {\r\n            return <p key={group._id}>{group.title}</p>;\r\n          })}\r\n        </ul>\r\n      )}\r\n<p onClick={toggleSchedule}>Schedule</p>\r\n      <ul>\r\n        \r\n        {/* <li id='today' onClick={()=>onChousePeriod(id)}>Today</li>\r\n        <li id='week' onClick={()=>onChousePeriod(id)}>Week</li>\r\n        <li id='month' onClick={()=>onChousePeriod(id)}>Month</li>\r\n        <li id='lastMonth'onClick={()=>onChousePeriod(id)}>Last month</li> */}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminPage;\r\n//  <Link to='/groups'>Groups</Link>\r\n//       <Link to='/schedule'>Groups</Link>\r\n"],"names":["useAppSelector","useSelector","AdminPage","visibleGroups","setVisibleGroups","useState","dispatch","useDispatch","useEffect","fetchAllGroups","groups","state","_jsxs","children","_jsx","onClick","toggleGroupList","map","group","title","_id","toggleSchedule"],"sourceRoot":""}